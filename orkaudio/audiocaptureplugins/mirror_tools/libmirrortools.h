/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package mirror_tools */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 16 "libc_init.go"

#include "stdlib.h"
typedef struct tagVoIpSipData {
	char* call_id; 						//对应VoIpSession中的m_callId,是Sip INVITE的callId
	char* local_party;				//本地显示名,与INVITE的发起方有关,如: from:8888@192.168.31.155, from:与@之间的显示名,是分机号
	char* remote_party; 			//远端显示名,与INVITE的发起方有关,如: to:1001@192.168.31.120, to:与@之间的显示名,是分机号
	char* from_name; 					//发起方的显示名称
	char* request_uri;				//呼叫方的显示名称
	unsigned int sender_ip; 	//发送方的ip int值
	unsigned int receiver_ip;	//接收方的ip int值
	unsigned int rtp_ip;			//发起方rtp的ip int值
	unsigned short rtp_port;	//发起方rtp使用的端口
} VoIpSipData;

typedef struct tagVoIpRTPData {
	char* call_id;								//对应VoIpSession中的m_callId,是Sip INVITE的callId
	unsigned char channel;				//oreka根据来源和目标地址确认的数据channel
	unsigned int source_ip;				//rtp数据包的来源ip int值
	unsigned int dest_ip;					//rtp数据包的目标ip int值
	unsigned short source_port; 	//rtp数据包的来源端口
	unsigned short dest_port;			//rtp数据包的目标端口
	unsigned short payload_type;	//rtp的数据类型,具体对应关系见RtpPayloadTypeEnumToString
	unsigned char* payload;				//rtp数据包的指针地址
	unsigned int payload_size;		//rtp数据包的长度
	unsigned int ssrc;            //rtp数据包ssrc
} VoIpRTPData;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern int mirror_init();
extern void mirror_uninit();
extern void mirror_set_log_level(char* level);
extern void mirror_voip_invite(VoIpSipData data, char* tracking_id);
extern void mirror_voip_add_tracking(char* call_id, char* tracking_id);
extern void mirror_voip_stop(char* call_id, char* tracking_id);
extern void mirror_voip_add_ssrc(char* call_id, unsigned int ssrc);
extern char* mirror_voip_ssrc_to_call_id(unsigned int ssrc);
extern void mirror_voip_free_call_id(char* call_id);
extern void mirror_voip_rtp(VoIpRTPData data);

#ifdef __cplusplus
}
#endif
